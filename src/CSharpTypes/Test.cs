// Generated by protoc-gen-cs, Version=2.4.1.521, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace tutorial {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Test {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_tutorial_Msg2__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::tutorial.Msg2, global::tutorial.Msg2.Builder> internal__static_tutorial_Msg2__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Test() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp0ZXN0LnByb3RvEgh0dXRvcmlhbBoZY3NoYXJwL2NzaGFycF90eXBlcy5w", 
            "cm90byKHAgoETXNnMhIcCg1vcHRfZGF0ZV90aW1lGAEgASgJQgWwsOpMARIj", 
            "ChRvcHRfZGF0ZV90aW1lX29mZnNldBgCIAEoCUIFsLDqTAISGgoLb3B0X2Rl", 
            "Y2ltYWwYAyABKAlCBbCw6kwDEhcKCG9wdF9ndWlkGAQgASgJQgWwsOpMBBIc", 
            "Cg1yZXBfZGF0ZV90aW1lGAUgAygJQgWwsOpMARIjChRyZXBfZGF0ZV90aW1l", 
            "X29mZnNldBgGIAMoCUIFsLDqTAISGgoLcmVwX2RlY2ltYWwYByADKAlCBbCw", 
          "6kwDEhcKCHJlcF9ndWlkGAggAygJQgWwsOpMBBIPCgdyZXBfc3RyGAogAygJ"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_tutorial_Msg2__Descriptor = Descriptor.MessageTypes[0];
        internal__static_tutorial_Msg2__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::tutorial.Msg2, global::tutorial.Msg2.Builder>(internal__static_tutorial_Msg2__Descriptor,
                new string[] { "OptDateTime", "OptDateTimeOffset", "OptDecimal", "OptGuid", "RepDateTime", "RepDateTimeOffset", "RepDecimal", "RepGuid", "RepStr", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::CSharp.CSharpTypesProto.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::CSharp.CSharpTypesProto.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Msg2 : pb::GeneratedMessage<Msg2, Msg2.Builder> {
    private Msg2() { }
    private static readonly Msg2 defaultInstance = new Msg2().MakeReadOnly();
    private static readonly string[] _msg2FieldNames = new string[] { "opt_date_time", "opt_date_time_offset", "opt_decimal", "opt_guid", "rep_date_time", "rep_date_time_offset", "rep_decimal", "rep_guid", "rep_str" };
    private static readonly uint[] _msg2FieldTags = new uint[] { 10, 18, 26, 34, 42, 50, 58, 66, 82 };
    public static Msg2 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Msg2 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Msg2 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::tutorial.Test.internal__static_tutorial_Msg2__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Msg2, Msg2.Builder> InternalFieldAccessors {
      get { return global::tutorial.Test.internal__static_tutorial_Msg2__FieldAccessorTable; }
    }
    
    public const int OptDateTimeFieldNumber = 1;
    private bool hasOptDateTime;
    private System.DateTime optDateTime_;
    public bool HasOptDateTime {
      get { return hasOptDateTime; }
    }
    public System.DateTime OptDateTime {
      get { return optDateTime_; }
    }
    
    public const int OptDateTimeOffsetFieldNumber = 2;
    private bool hasOptDateTimeOffset;
    private System.DateTimeOffset optDateTimeOffset_;
    public bool HasOptDateTimeOffset {
      get { return hasOptDateTimeOffset; }
    }
    public System.DateTimeOffset OptDateTimeOffset {
      get { return optDateTimeOffset_; }
    }
    
    public const int OptDecimalFieldNumber = 3;
    private bool hasOptDecimal;
    private decimal optDecimal_;
    public bool HasOptDecimal {
      get { return hasOptDecimal; }
    }
    public decimal OptDecimal {
      get { return optDecimal_; }
    }
    
    public const int OptGuidFieldNumber = 4;
    private bool hasOptGuid;
    private System.Guid optGuid_;
    public bool HasOptGuid {
      get { return hasOptGuid; }
    }
    public System.Guid OptGuid {
      get { return optGuid_; }
    }
    
    public const int RepDateTimeFieldNumber = 5;
    private pbc::PopsicleList<System.DateTime> repDateTime_ = new pbc::PopsicleList<System.DateTime>();
    public scg::IList<System.DateTime> RepDateTimeList {
      get { return pbc::Lists.AsReadOnly(repDateTime_); }
    }
    public int RepDateTimeCount {
      get { return repDateTime_.Count; }
    }
    public System.DateTime GetRepDateTime(int index) {
      return repDateTime_[index];
    }
    
    public const int RepDateTimeOffsetFieldNumber = 6;
    private pbc::PopsicleList<System.DateTimeOffset> repDateTimeOffset_ = new pbc::PopsicleList<System.DateTimeOffset>();
    public scg::IList<System.DateTimeOffset> RepDateTimeOffsetList {
      get { return pbc::Lists.AsReadOnly(repDateTimeOffset_); }
    }
    public int RepDateTimeOffsetCount {
      get { return repDateTimeOffset_.Count; }
    }
    public System.DateTimeOffset GetRepDateTimeOffset(int index) {
      return repDateTimeOffset_[index];
    }
    
    public const int RepDecimalFieldNumber = 7;
    private pbc::PopsicleList<decimal> repDecimal_ = new pbc::PopsicleList<decimal>();
    public scg::IList<decimal> RepDecimalList {
      get { return pbc::Lists.AsReadOnly(repDecimal_); }
    }
    public int RepDecimalCount {
      get { return repDecimal_.Count; }
    }
    public decimal GetRepDecimal(int index) {
      return repDecimal_[index];
    }
    
    public const int RepGuidFieldNumber = 8;
    private pbc::PopsicleList<System.Guid> repGuid_ = new pbc::PopsicleList<System.Guid>();
    public scg::IList<System.Guid> RepGuidList {
      get { return pbc::Lists.AsReadOnly(repGuid_); }
    }
    public int RepGuidCount {
      get { return repGuid_.Count; }
    }
    public System.Guid GetRepGuid(int index) {
      return repGuid_[index];
    }
    
    public const int RepStrFieldNumber = 10;
    private pbc::PopsicleList<string> repStr_ = new pbc::PopsicleList<string>();
    public scg::IList<string> RepStrList {
      get { return pbc::Lists.AsReadOnly(repStr_); }
    }
    public int RepStrCount {
      get { return repStr_.Count; }
    }
    public string GetRepStr(int index) {
      return repStr_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _msg2FieldNames;
      if (hasOptDateTime) {
        output.WriteString(1, field_names[0], OptDateTime.ToString("O"));
      }
      if (hasOptDateTimeOffset) {
        output.WriteString(2, field_names[1], OptDateTimeOffset.ToString("O"));
      }
      if (hasOptDecimal) {
        output.WriteString(3, field_names[2], OptDecimal.ToString(System.Globalization.CultureInfo.InvariantCulture));
      }
      if (hasOptGuid) {
        output.WriteString(4, field_names[3], OptGuid.ToString("N"));
      }
      if (repDateTime_.Count > 0) {
        for (int i = 0; i < repDateTime_.Count; ++i) {
          output.WriteString(5, field_names[4], GetRepDateTime(i).ToString("O"));
        }
      }
      if (repDateTimeOffset_.Count > 0) {
        for (int i = 0; i < repDateTimeOffset_.Count; ++i) {
          output.WriteString(6, field_names[5], GetRepDateTimeOffset(i).ToString("O"));
        }
      }
      if (repDecimal_.Count > 0) {
        for (int i = 0; i < repDecimal_.Count; ++i) {
          output.WriteString(7, field_names[6], GetRepDecimal(i).ToString(System.Globalization.CultureInfo.InvariantCulture));
        }
      }
      if (repGuid_.Count > 0) {
        for (int i = 0; i < repGuid_.Count; ++i) {
          output.WriteString(8, field_names[7], GetRepGuid(i).ToString("N"));
        }
      }
      if (repStr_.Count > 0) {
        output.WriteStringArray(10, field_names[8], repStr_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOptDateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(1, OptDateTime.ToString("O"));
        }
        if (hasOptDateTimeOffset) {
          size += pb::CodedOutputStream.ComputeStringSize(2, OptDateTimeOffset.ToString("O"));
        }
        if (hasOptDecimal) {
          size += pb::CodedOutputStream.ComputeStringSize(3, OptDecimal.ToString(System.Globalization.CultureInfo.InvariantCulture));
        }
        if (hasOptGuid) {
          size += pb::CodedOutputStream.ComputeStringSize(4, OptGuid.ToString("N"));
        }
        {
          int dataSize = 0;
          for (int i = 0; i < repDateTime_.Count; ++i) {
            dataSize += pb::CodedOutputStream.ComputeStringSize(5, GetRepDateTime(i).ToString("O"));
          }
          size += dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < repDateTimeOffset_.Count; ++i) {
            dataSize += pb::CodedOutputStream.ComputeStringSize(6, GetRepDateTimeOffset(i).ToString("O"));
          }
          size += dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < repDecimal_.Count; ++i) {
            dataSize += pb::CodedOutputStream.ComputeStringSize(7, GetRepDecimal(i).ToString(System.Globalization.CultureInfo.InvariantCulture));
          }
          size += dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < repGuid_.Count; ++i) {
            dataSize += pb::CodedOutputStream.ComputeStringSize(8, GetRepGuid(i).ToString("N"));
          }
          size += dataSize;
        }
        {
          int dataSize = 0;
          foreach (string element in RepStrList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * repStr_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Msg2 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Msg2 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Msg2 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Msg2 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Msg2 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Msg2 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Msg2 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Msg2 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Msg2 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Msg2 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Msg2 MakeReadOnly() {
      repDateTime_.MakeReadOnly();
      repDateTimeOffset_.MakeReadOnly();
      repDecimal_.MakeReadOnly();
      repGuid_.MakeReadOnly();
      repStr_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Msg2 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Msg2, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Msg2 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Msg2 result;
      
      private Msg2 PrepareBuilder() {
        if (resultIsReadOnly) {
          Msg2 original = result;
          result = new Msg2();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Msg2 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::tutorial.Msg2.Descriptor; }
      }
      
      public override Msg2 DefaultInstanceForType {
        get { return global::tutorial.Msg2.DefaultInstance; }
      }
      
      public override Msg2 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Msg2) {
          return MergeFrom((Msg2) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Msg2 other) {
        if (other == global::tutorial.Msg2.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOptDateTime) {
          OptDateTime = other.OptDateTime;
        }
        if (other.HasOptDateTimeOffset) {
          OptDateTimeOffset = other.OptDateTimeOffset;
        }
        if (other.HasOptDecimal) {
          OptDecimal = other.OptDecimal;
        }
        if (other.HasOptGuid) {
          OptGuid = other.OptGuid;
        }
        if (other.repDateTime_.Count != 0) {
          result.repDateTime_.Add(other.repDateTime_);
        }
        if (other.repDateTimeOffset_.Count != 0) {
          result.repDateTimeOffset_.Add(other.repDateTimeOffset_);
        }
        if (other.repDecimal_.Count != 0) {
          result.repDecimal_.Add(other.repDecimal_);
        }
        if (other.repGuid_.Count != 0) {
          result.repGuid_.Add(other.repGuid_);
        }
        if (other.repStr_.Count != 0) {
          result.repStr_.Add(other.repStr_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_msg2FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _msg2FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              string text = null;
              if (input.ReadString(ref text)) {
                System.DateTime value;
                if (System.DateTime.TryParse(text, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeUniversal, out value)) {
                  result.hasOptDateTime = true;
                  result.optDateTime_ = value;
                }
              }
              break;
            }
            case 18: {
              string text = null;
              if (input.ReadString(ref text)) {
                System.DateTimeOffset value;
                if (System.DateTimeOffset.TryParse(text, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeUniversal, out value)) {
                  result.hasOptDateTimeOffset = true;
                  result.optDateTimeOffset_ = value;
                }
              }
              break;
            }
            case 26: {
              string text = null;
              if (input.ReadString(ref text)) {
                decimal value;
                if (System.Decimal.TryParse(text, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out value)) {
                  result.hasOptDecimal = true;
                  result.optDecimal_ = value;
                }
              }
              break;
            }
            case 34: {
              string text = null;
              if (input.ReadString(ref text)) {
                System.Guid value;
                try {
                  value = new System.Guid(text); 
                  result.hasOptGuid = true;
                  result.optGuid_ = value;
                }
                catch {}
              }
              break;
            }
            case 42: {
              var list = new System.Collections.Generic.List<string>();
              input.ReadStringArray(tag, field_name, list);
              foreach (var text in list) {
                System.DateTime value;
                if (System.DateTime.TryParse(text, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeUniversal, out value)) {
                  AddRepDateTime(value);
                }
              }
              break;
            }
            case 50: {
              var list = new System.Collections.Generic.List<string>();
              input.ReadStringArray(tag, field_name, list);
              foreach (var text in list) {
                System.DateTimeOffset value;
                if (System.DateTimeOffset.TryParse(text, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeUniversal, out value)) {
                  AddRepDateTimeOffset(value);
                }
              }
              break;
            }
            case 58: {
              var list = new System.Collections.Generic.List<string>();
              input.ReadStringArray(tag, field_name, list);
              foreach (var text in list) {
                decimal value;
                if (System.Decimal.TryParse(text, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out value)) {
                  AddRepDecimal(value);
                }
              }
              break;
            }
            case 66: {
              var list = new System.Collections.Generic.List<string>();
              input.ReadStringArray(tag, field_name, list);
              foreach (var text in list) {
                System.Guid value;
                try {
                  value = new System.Guid(text); 
                  AddRepGuid(value);
                }
                catch {}
              }
              break;
            }
            case 82: {
              input.ReadStringArray(tag, field_name, result.repStr_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOptDateTime {
       get { return result.hasOptDateTime; }
      }
      public System.DateTime OptDateTime {
        get { return result.OptDateTime; }
        set { SetOptDateTime(value); }
      }
      public Builder SetOptDateTime(System.DateTime value) {
        PrepareBuilder();
        result.hasOptDateTime = true;
        result.optDateTime_ = value;
        return this;
      }
      public Builder ClearOptDateTime() {
        PrepareBuilder();
        result.hasOptDateTime = false;
        result.optDateTime_ = default(System.DateTime);
        return this;
      }
      
      public bool HasOptDateTimeOffset {
       get { return result.hasOptDateTimeOffset; }
      }
      public System.DateTimeOffset OptDateTimeOffset {
        get { return result.OptDateTimeOffset; }
        set { SetOptDateTimeOffset(value); }
      }
      public Builder SetOptDateTimeOffset(System.DateTimeOffset value) {
        PrepareBuilder();
        result.hasOptDateTimeOffset = true;
        result.optDateTimeOffset_ = value;
        return this;
      }
      public Builder ClearOptDateTimeOffset() {
        PrepareBuilder();
        result.hasOptDateTimeOffset = false;
        result.optDateTimeOffset_ = default(System.DateTimeOffset);
        return this;
      }
      
      public bool HasOptDecimal {
       get { return result.hasOptDecimal; }
      }
      public decimal OptDecimal {
        get { return result.OptDecimal; }
        set { SetOptDecimal(value); }
      }
      public Builder SetOptDecimal(decimal value) {
        PrepareBuilder();
        result.hasOptDecimal = true;
        result.optDecimal_ = value;
        return this;
      }
      public Builder ClearOptDecimal() {
        PrepareBuilder();
        result.hasOptDecimal = false;
        result.optDecimal_ = default(decimal);
        return this;
      }
      
      public bool HasOptGuid {
       get { return result.hasOptGuid; }
      }
      public System.Guid OptGuid {
        get { return result.OptGuid; }
        set { SetOptGuid(value); }
      }
      public Builder SetOptGuid(System.Guid value) {
        PrepareBuilder();
        result.hasOptGuid = true;
        result.optGuid_ = value;
        return this;
      }
      public Builder ClearOptGuid() {
        PrepareBuilder();
        result.hasOptGuid = false;
        result.optGuid_ = default(System.Guid);
        return this;
      }
      
      public pbc::IPopsicleList<System.DateTime> RepDateTimeList {
        get { return PrepareBuilder().repDateTime_; }
      }
      public int RepDateTimeCount {
        get { return result.RepDateTimeCount; }
      }
      public System.DateTime GetRepDateTime(int index) {
        return result.GetRepDateTime(index);
      }
      public Builder SetRepDateTime(int index, System.DateTime value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repDateTime_[index] = value;
        return this;
      }
      public Builder AddRepDateTime(System.DateTime value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repDateTime_.Add(value);
        return this;
      }
      public Builder AddRangeRepDateTime(scg::IEnumerable<System.DateTime> values) {
        PrepareBuilder();
        result.repDateTime_.Add(values);
        return this;
      }
      public Builder ClearRepDateTime() {
        PrepareBuilder();
        result.repDateTime_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<System.DateTimeOffset> RepDateTimeOffsetList {
        get { return PrepareBuilder().repDateTimeOffset_; }
      }
      public int RepDateTimeOffsetCount {
        get { return result.RepDateTimeOffsetCount; }
      }
      public System.DateTimeOffset GetRepDateTimeOffset(int index) {
        return result.GetRepDateTimeOffset(index);
      }
      public Builder SetRepDateTimeOffset(int index, System.DateTimeOffset value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repDateTimeOffset_[index] = value;
        return this;
      }
      public Builder AddRepDateTimeOffset(System.DateTimeOffset value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repDateTimeOffset_.Add(value);
        return this;
      }
      public Builder AddRangeRepDateTimeOffset(scg::IEnumerable<System.DateTimeOffset> values) {
        PrepareBuilder();
        result.repDateTimeOffset_.Add(values);
        return this;
      }
      public Builder ClearRepDateTimeOffset() {
        PrepareBuilder();
        result.repDateTimeOffset_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<decimal> RepDecimalList {
        get { return PrepareBuilder().repDecimal_; }
      }
      public int RepDecimalCount {
        get { return result.RepDecimalCount; }
      }
      public decimal GetRepDecimal(int index) {
        return result.GetRepDecimal(index);
      }
      public Builder SetRepDecimal(int index, decimal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repDecimal_[index] = value;
        return this;
      }
      public Builder AddRepDecimal(decimal value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repDecimal_.Add(value);
        return this;
      }
      public Builder AddRangeRepDecimal(scg::IEnumerable<decimal> values) {
        PrepareBuilder();
        result.repDecimal_.Add(values);
        return this;
      }
      public Builder ClearRepDecimal() {
        PrepareBuilder();
        result.repDecimal_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<System.Guid> RepGuidList {
        get { return PrepareBuilder().repGuid_; }
      }
      public int RepGuidCount {
        get { return result.RepGuidCount; }
      }
      public System.Guid GetRepGuid(int index) {
        return result.GetRepGuid(index);
      }
      public Builder SetRepGuid(int index, System.Guid value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repGuid_[index] = value;
        return this;
      }
      public Builder AddRepGuid(System.Guid value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repGuid_.Add(value);
        return this;
      }
      public Builder AddRangeRepGuid(scg::IEnumerable<System.Guid> values) {
        PrepareBuilder();
        result.repGuid_.Add(values);
        return this;
      }
      public Builder ClearRepGuid() {
        PrepareBuilder();
        result.repGuid_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> RepStrList {
        get { return PrepareBuilder().repStr_; }
      }
      public int RepStrCount {
        get { return result.RepStrCount; }
      }
      public string GetRepStr(int index) {
        return result.GetRepStr(index);
      }
      public Builder SetRepStr(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repStr_[index] = value;
        return this;
      }
      public Builder AddRepStr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repStr_.Add(value);
        return this;
      }
      public Builder AddRangeRepStr(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.repStr_.Add(values);
        return this;
      }
      public Builder ClearRepStr() {
        PrepareBuilder();
        result.repStr_.Clear();
        return this;
      }
    }
    static Msg2() {
      object.ReferenceEquals(global::tutorial.Test.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
