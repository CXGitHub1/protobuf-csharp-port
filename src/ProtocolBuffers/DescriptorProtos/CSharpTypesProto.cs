// Generated by protoc-gen-cs, Version=2.4.1.521, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CSharp {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CSharpTypesProto {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static CSharpTypesProto() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DateTime : pb::GeneratedMessageLite<DateTime, DateTime.Builder> {
    private DateTime() { }
    private static readonly DateTime defaultInstance = new DateTime().MakeReadOnly();
    private static readonly string[] _dateTimeFieldNames = new string[] { "ticks" };
    private static readonly uint[] _dateTimeFieldTags = new uint[] { 9 };
    public static DateTime DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DateTime DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DateTime ThisMessage {
      get { return this; }
    }
    
    public const int TicksFieldNumber = 1;
    private bool hasTicks;
    private long ticks_;
    public bool HasTicks {
      get { return hasTicks; }
    }
    public long Ticks {
      get { return ticks_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dateTimeFieldNames;
      if (hasTicks) {
        output.WriteSFixed64(1, field_names[0], Ticks);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTicks) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(1, Ticks);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasTicks) hash ^= ticks_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      DateTime other = obj as DateTime;
      if (other == null) return false;
      if (hasTicks != other.hasTicks || (hasTicks && !ticks_.Equals(other.ticks_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("ticks", hasTicks, ticks_, writer);
    }
    #endregion
    
    public static DateTime ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DateTime ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DateTime ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DateTime ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DateTime ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DateTime ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DateTime ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DateTime ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DateTime ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DateTime ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DateTime MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DateTime prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<DateTime, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DateTime cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DateTime result;
      
      private DateTime PrepareBuilder() {
        if (resultIsReadOnly) {
          DateTime original = result;
          result = new DateTime();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DateTime MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override DateTime DefaultInstanceForType {
        get { return global::CSharp.DateTime.DefaultInstance; }
      }
      
      public override DateTime BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is DateTime) {
          return MergeFrom((DateTime) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DateTime other) {
        if (other == global::CSharp.DateTime.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTicks) {
          Ticks = other.Ticks;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dateTimeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dateTimeFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasTicks = input.ReadSFixed64(ref result.ticks_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasTicks {
        get { return result.hasTicks; }
      }
      public long Ticks {
        get { return result.Ticks; }
        set { SetTicks(value); }
      }
      public Builder SetTicks(long value) {
        PrepareBuilder();
        result.hasTicks = true;
        result.ticks_ = value;
        return this;
      }
      public Builder ClearTicks() {
        PrepareBuilder();
        result.hasTicks = false;
        result.ticks_ = 0;
        return this;
      }
    }
    static DateTime() {
      object.ReferenceEquals(global::CSharp.CSharpTypesProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DateTimeOffset : pb::GeneratedMessageLite<DateTimeOffset, DateTimeOffset.Builder> {
    private DateTimeOffset() { }
    private static readonly DateTimeOffset defaultInstance = new DateTimeOffset().MakeReadOnly();
    private static readonly string[] _dateTimeOffsetFieldNames = new string[] { "offset_ticks", "ticks" };
    private static readonly uint[] _dateTimeOffsetFieldTags = new uint[] { 17, 9 };
    public static DateTimeOffset DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DateTimeOffset DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DateTimeOffset ThisMessage {
      get { return this; }
    }
    
    public const int TicksFieldNumber = 1;
    private bool hasTicks;
    private long ticks_;
    public bool HasTicks {
      get { return hasTicks; }
    }
    public long Ticks {
      get { return ticks_; }
    }
    
    public const int OffsetTicksFieldNumber = 2;
    private bool hasOffsetTicks;
    private long offsetTicks_;
    public bool HasOffsetTicks {
      get { return hasOffsetTicks; }
    }
    public long OffsetTicks {
      get { return offsetTicks_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dateTimeOffsetFieldNames;
      if (hasTicks) {
        output.WriteSFixed64(1, field_names[1], Ticks);
      }
      if (hasOffsetTicks) {
        output.WriteSFixed64(2, field_names[0], OffsetTicks);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTicks) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(1, Ticks);
        }
        if (hasOffsetTicks) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(2, OffsetTicks);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasTicks) hash ^= ticks_.GetHashCode();
      if (hasOffsetTicks) hash ^= offsetTicks_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      DateTimeOffset other = obj as DateTimeOffset;
      if (other == null) return false;
      if (hasTicks != other.hasTicks || (hasTicks && !ticks_.Equals(other.ticks_))) return false;
      if (hasOffsetTicks != other.hasOffsetTicks || (hasOffsetTicks && !offsetTicks_.Equals(other.offsetTicks_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("ticks", hasTicks, ticks_, writer);
      PrintField("offset_ticks", hasOffsetTicks, offsetTicks_, writer);
    }
    #endregion
    
    public static DateTimeOffset ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DateTimeOffset ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DateTimeOffset ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DateTimeOffset ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DateTimeOffset ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DateTimeOffset ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DateTimeOffset ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DateTimeOffset ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DateTimeOffset ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DateTimeOffset ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DateTimeOffset MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DateTimeOffset prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<DateTimeOffset, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DateTimeOffset cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DateTimeOffset result;
      
      private DateTimeOffset PrepareBuilder() {
        if (resultIsReadOnly) {
          DateTimeOffset original = result;
          result = new DateTimeOffset();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DateTimeOffset MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override DateTimeOffset DefaultInstanceForType {
        get { return global::CSharp.DateTimeOffset.DefaultInstance; }
      }
      
      public override DateTimeOffset BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is DateTimeOffset) {
          return MergeFrom((DateTimeOffset) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DateTimeOffset other) {
        if (other == global::CSharp.DateTimeOffset.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTicks) {
          Ticks = other.Ticks;
        }
        if (other.HasOffsetTicks) {
          OffsetTicks = other.OffsetTicks;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dateTimeOffsetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dateTimeOffsetFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasTicks = input.ReadSFixed64(ref result.ticks_);
              break;
            }
            case 17: {
              result.hasOffsetTicks = input.ReadSFixed64(ref result.offsetTicks_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasTicks {
        get { return result.hasTicks; }
      }
      public long Ticks {
        get { return result.Ticks; }
        set { SetTicks(value); }
      }
      public Builder SetTicks(long value) {
        PrepareBuilder();
        result.hasTicks = true;
        result.ticks_ = value;
        return this;
      }
      public Builder ClearTicks() {
        PrepareBuilder();
        result.hasTicks = false;
        result.ticks_ = 0;
        return this;
      }
      
      public bool HasOffsetTicks {
        get { return result.hasOffsetTicks; }
      }
      public long OffsetTicks {
        get { return result.OffsetTicks; }
        set { SetOffsetTicks(value); }
      }
      public Builder SetOffsetTicks(long value) {
        PrepareBuilder();
        result.hasOffsetTicks = true;
        result.offsetTicks_ = value;
        return this;
      }
      public Builder ClearOffsetTicks() {
        PrepareBuilder();
        result.hasOffsetTicks = false;
        result.offsetTicks_ = 0;
        return this;
      }
    }
    static DateTimeOffset() {
      object.ReferenceEquals(global::CSharp.CSharpTypesProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Decimal : pb::GeneratedMessageLite<Decimal, Decimal.Builder> {
    private Decimal() { }
    private static readonly Decimal defaultInstance = new Decimal().MakeReadOnly();
    private static readonly string[] _decimalFieldNames = new string[] { "i0", "i1", "i2", "i3" };
    private static readonly uint[] _decimalFieldTags = new uint[] { 13, 21, 29, 37 };
    public static Decimal DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Decimal DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Decimal ThisMessage {
      get { return this; }
    }
    
    public const int I0FieldNumber = 1;
    private bool hasI0;
    private int i0_;
    public bool HasI0 {
      get { return hasI0; }
    }
    public int I0 {
      get { return i0_; }
    }
    
    public const int I1FieldNumber = 2;
    private bool hasI1;
    private int i1_;
    public bool HasI1 {
      get { return hasI1; }
    }
    public int I1 {
      get { return i1_; }
    }
    
    public const int I2FieldNumber = 3;
    private bool hasI2;
    private int i2_;
    public bool HasI2 {
      get { return hasI2; }
    }
    public int I2 {
      get { return i2_; }
    }
    
    public const int I3FieldNumber = 4;
    private bool hasI3;
    private int i3_;
    public bool HasI3 {
      get { return hasI3; }
    }
    public int I3 {
      get { return i3_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _decimalFieldNames;
      if (hasI0) {
        output.WriteSFixed32(1, field_names[0], I0);
      }
      if (hasI1) {
        output.WriteSFixed32(2, field_names[1], I1);
      }
      if (hasI2) {
        output.WriteSFixed32(3, field_names[2], I2);
      }
      if (hasI3) {
        output.WriteSFixed32(4, field_names[3], I3);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasI0) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, I0);
        }
        if (hasI1) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, I1);
        }
        if (hasI2) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(3, I2);
        }
        if (hasI3) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(4, I3);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasI0) hash ^= i0_.GetHashCode();
      if (hasI1) hash ^= i1_.GetHashCode();
      if (hasI2) hash ^= i2_.GetHashCode();
      if (hasI3) hash ^= i3_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Decimal other = obj as Decimal;
      if (other == null) return false;
      if (hasI0 != other.hasI0 || (hasI0 && !i0_.Equals(other.i0_))) return false;
      if (hasI1 != other.hasI1 || (hasI1 && !i1_.Equals(other.i1_))) return false;
      if (hasI2 != other.hasI2 || (hasI2 && !i2_.Equals(other.i2_))) return false;
      if (hasI3 != other.hasI3 || (hasI3 && !i3_.Equals(other.i3_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("i0", hasI0, i0_, writer);
      PrintField("i1", hasI1, i1_, writer);
      PrintField("i2", hasI2, i2_, writer);
      PrintField("i3", hasI3, i3_, writer);
    }
    #endregion
    
    public static Decimal ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Decimal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Decimal ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Decimal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Decimal ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Decimal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Decimal ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Decimal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Decimal ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Decimal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Decimal MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Decimal prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Decimal, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Decimal cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Decimal result;
      
      private Decimal PrepareBuilder() {
        if (resultIsReadOnly) {
          Decimal original = result;
          result = new Decimal();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Decimal MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Decimal DefaultInstanceForType {
        get { return global::CSharp.Decimal.DefaultInstance; }
      }
      
      public override Decimal BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Decimal) {
          return MergeFrom((Decimal) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Decimal other) {
        if (other == global::CSharp.Decimal.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasI0) {
          I0 = other.I0;
        }
        if (other.HasI1) {
          I1 = other.I1;
        }
        if (other.HasI2) {
          I2 = other.I2;
        }
        if (other.HasI3) {
          I3 = other.I3;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_decimalFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _decimalFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasI0 = input.ReadSFixed32(ref result.i0_);
              break;
            }
            case 21: {
              result.hasI1 = input.ReadSFixed32(ref result.i1_);
              break;
            }
            case 29: {
              result.hasI2 = input.ReadSFixed32(ref result.i2_);
              break;
            }
            case 37: {
              result.hasI3 = input.ReadSFixed32(ref result.i3_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasI0 {
        get { return result.hasI0; }
      }
      public int I0 {
        get { return result.I0; }
        set { SetI0(value); }
      }
      public Builder SetI0(int value) {
        PrepareBuilder();
        result.hasI0 = true;
        result.i0_ = value;
        return this;
      }
      public Builder ClearI0() {
        PrepareBuilder();
        result.hasI0 = false;
        result.i0_ = 0;
        return this;
      }
      
      public bool HasI1 {
        get { return result.hasI1; }
      }
      public int I1 {
        get { return result.I1; }
        set { SetI1(value); }
      }
      public Builder SetI1(int value) {
        PrepareBuilder();
        result.hasI1 = true;
        result.i1_ = value;
        return this;
      }
      public Builder ClearI1() {
        PrepareBuilder();
        result.hasI1 = false;
        result.i1_ = 0;
        return this;
      }
      
      public bool HasI2 {
        get { return result.hasI2; }
      }
      public int I2 {
        get { return result.I2; }
        set { SetI2(value); }
      }
      public Builder SetI2(int value) {
        PrepareBuilder();
        result.hasI2 = true;
        result.i2_ = value;
        return this;
      }
      public Builder ClearI2() {
        PrepareBuilder();
        result.hasI2 = false;
        result.i2_ = 0;
        return this;
      }
      
      public bool HasI3 {
        get { return result.hasI3; }
      }
      public int I3 {
        get { return result.I3; }
        set { SetI3(value); }
      }
      public Builder SetI3(int value) {
        PrepareBuilder();
        result.hasI3 = true;
        result.i3_ = value;
        return this;
      }
      public Builder ClearI3() {
        PrepareBuilder();
        result.hasI3 = false;
        result.i3_ = 0;
        return this;
      }
    }
    static Decimal() {
      object.ReferenceEquals(global::CSharp.CSharpTypesProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Guid : pb::GeneratedMessageLite<Guid, Guid.Builder> {
    private Guid() { }
    private static readonly Guid defaultInstance = new Guid().MakeReadOnly();
    private static readonly string[] _guidFieldNames = new string[] { "bits" };
    private static readonly uint[] _guidFieldTags = new uint[] { 10 };
    public static Guid DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Guid DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Guid ThisMessage {
      get { return this; }
    }
    
    public const int BitsFieldNumber = 1;
    private bool hasBits;
    private pb::ByteString bits_ = pb::ByteString.Empty;
    public bool HasBits {
      get { return hasBits; }
    }
    public pb::ByteString Bits {
      get { return bits_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guidFieldNames;
      if (hasBits) {
        output.WriteBytes(1, field_names[0], Bits);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBits) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Bits);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBits) hash ^= bits_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Guid other = obj as Guid;
      if (other == null) return false;
      if (hasBits != other.hasBits || (hasBits && !bits_.Equals(other.bits_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("bits", hasBits, bits_, writer);
    }
    #endregion
    
    public static Guid ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Guid ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Guid ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Guid ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Guid ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Guid ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Guid ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Guid ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Guid ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Guid ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Guid MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Guid prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Guid, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Guid cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Guid result;
      
      private Guid PrepareBuilder() {
        if (resultIsReadOnly) {
          Guid original = result;
          result = new Guid();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Guid MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Guid DefaultInstanceForType {
        get { return global::CSharp.Guid.DefaultInstance; }
      }
      
      public override Guid BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Guid) {
          return MergeFrom((Guid) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Guid other) {
        if (other == global::CSharp.Guid.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBits) {
          Bits = other.Bits;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guidFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guidFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBits = input.ReadBytes(ref result.bits_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBits {
        get { return result.hasBits; }
      }
      public pb::ByteString Bits {
        get { return result.Bits; }
        set { SetBits(value); }
      }
      public Builder SetBits(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBits = true;
        result.bits_ = value;
        return this;
      }
      public Builder ClearBits() {
        PrepareBuilder();
        result.hasBits = false;
        result.bits_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Guid() {
      object.ReferenceEquals(global::CSharp.CSharpTypesProto.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
